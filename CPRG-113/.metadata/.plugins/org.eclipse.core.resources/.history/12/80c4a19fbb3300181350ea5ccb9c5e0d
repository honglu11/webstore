/**
 * 
 */
package ca.sait.ejb;

import java.util.UUID;

import javax.annotation.Resource;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.Queue;
import javax.jms.TextMessage;
import javax.jms.Topic;

import ca.sait.HasLogger;

/**
 * @author honglu
 *
 */
@Stateless
@LocalBean
public class RequestReponseEJB implements HasLogger {
    
    @Inject
    private JMSContext jmsContext;

    @Resource(lookup = "java:/jms/queue/ResponseQueue") // inject this one in
    private Queue responseQueue;

    @Resource(lookup = "java:/jms/topic/RequestTopic") // inject this one in
    private Topic requestTopic;
    
    private final String correlationId = UUID.randomUUID().toString(); // if message won't change don't use correlationId, if don't need to reply, degrade the performance
    
    // if have multiple message need correlationId link message together.
    public String sendMessage(String message) {
        logger().trace("ENTER sendMessage(String message)");
        try {
            final TextMessage textMessage = jmsContext.createTextMessage(message);
            textMessage.setJMSCorrelationID(correlationId);
            jmsContext.createProducer().send(requestTopic, textMessage);
            return "";
        } catch (JMSException e) {
            logger().error("error {}", e.getMessage());
      
        } finally {
            logger().trace("EXIT sendMessage(String message)");
        }
        
    }

}
