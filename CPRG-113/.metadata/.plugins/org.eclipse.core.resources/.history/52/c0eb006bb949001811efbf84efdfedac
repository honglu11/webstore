/**
 * 
 */
package ca.sait.mystore.ejb;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.ejb.ApplicationException;
import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import ca.sait.dto.Person;
import ca.sait.mystore.dao.DAOManagerFactory;
import ca.sait.mystore.dao.PersonDAO;
import ca.sait.mystore.entity.PersonEntity;
import ca.sait.services.NoEntityFoundException;
import ca.sait.services.PersonService;

/**
 * @author Chris Elias
 *
 */
@Stateless
@Local(PersonService.class)
public class PersonServiceImpl 
implements PersonService {
  
    // two ways to get it. from personDAO or Factory - avoid a lot of object
//    @Inject
//    private PersonDAO personDAO;
    
    @EJB
    private DAOManagerFactory daoFactory;
    
//    @PersistenceContext
//    private EntityManager entityManager;

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#create(ca.sait.dto.Person)
     */
    @Override
    public UUID create(Person person) {
        //if ( null == personDAO.find(person.getOid())) {
            PersonEntity personEntity = new PersonEntity();
            //personEntity.setOid(person.getOid());
            personEntity.setBirthdate(person.getBirthdate());
            personEntity.setEmail(person.getEmail());
            personEntity.setFirstName(person.getFirstName());
            personEntity.setLastName(person.getLastName());
            //personEntity.setCreateDate(Date.UTC(2018, 04, 01, 0, 0, 0));
            personEntity.setCreatedBy("test");
            personEntity.setLastModifiedBy("test");
            //personEntity.setLastModified(lastModified);
            
            //personDAO.persist(personEntity);
            daoFactory.getPersonDAO().persist(personEntity);
            
      
      //  }
        return personEntity.getOid();
    }

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findByEmail(java.lang.String)
     */
    @Override
    public Person findByEmail(String email) throws NoEntityFoundException{
        try {
               
        return daoFactory.getPersonDAO().findByEmailDTO(email);
        } catch(final NoResultException ex) {
            throw new NoEntityFoundException("No email: " + email);
        }
    }

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findById(java.util.UUID)
     */
    @Override
    public Person findById(UUID id) throws NoEntityFoundException {
        try {
        return daoFactory.getPersonDAO().findDTO(id);
        } catch(final NoResultException ex) {
            throw new NoEntityFoundException("No id: " + id);
        }
    }

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findAll()
     */
    @Override
    public List<Person> findAll() {
        return daoFactory.getPersonDAO().findAllPerson();
    }
    
    @Override
    public void removePerson(UUID oid) throws NoEntityFoundException {
        PersonEntity personEntity = daoFactory.getPersonDAO().find(id);
        if (personEntity == null)
        throw new NoEntityFoundException("No oid: " + oid);
    
        daoFactory.getPersonDAO().getEntityManager().remove(personEntity);
      
    }
    
//    private void retrieveAllPersons() {
//        //logger.trace("ENTER retrieveAllPersons()");
//
////        final TypedQuery<Person> query = entityManager.createNamedQuery(Person.FIND_ALL, Person.class);
////        persons = query.getResultList();
//
//        //logger.trace("EXIT retrieveAllPersons()");
//    }
//
//    private TypedQuery<Person> retrieveExistingPersonByEmail() {
//        logger.trace("ENTER retrieveExistingPersonByEmail()");
//
//        final TypedQuery<Person> query = entityManager.createNamedQuery(Person.FIND_BY_EMAIL, Person.class);
//        query.setParameter("email", person.getEmail());
//        logger.trace("EXIT retrieveExistingPersonByEmail()");
//        return query;
//    }

}