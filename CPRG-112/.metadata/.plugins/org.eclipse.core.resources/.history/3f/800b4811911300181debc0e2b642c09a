/**
 * 
 */
package ca.sait.mystore.mvc.model.admin;

import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.enterprise.inject.Model;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.UserTransaction;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ca.sait.mystore.entity.Person;
import ca.sait.mystore.entity.Product;
import ca.sait.mystore.mvc.model.ViewModel;

/**
 *
 */
@Model
public class AdminPersonModel extends ViewModel {

    private final Logger logger = LoggerFactory.getLogger(getClass());
    private String title;
    private List<Person> persons;
    private Person person;
    private String actionMessage;
    
    @PersistenceContext
    private EntityManager entityManager;
   
    @Resource
    private UserTransaction transaction;
    
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response) {
        logger.trace("ENTER handle(request, response)");
        
        title = "Fancy Person List";
        
        try {
            retrieveAllPersons();
            
            transaction.begin();
            
            final String oid = request.getParameter("oid");
            if (oid != null && !oid.trim().isEmpty()) {
                final UUID uuid = UUID.fromString(oid);
                person = entityManager.find(Person.class, uuid);
            } else {
                person = new Person();
            }

            final String action = request.getParameter("action");
            logger.debug("action: {}", action);

            if (action != null) {
                switch(action.toLowerCase()) {
                case "update":
                    update(request);
                    break;
                case "delete":
                    break;
                case "cancel":
                    break;
                default:
                    logger.warn("Unknown action: {}", action);
                }
            }
        } catch(final Exception ex) {
            logger.error(ex.getMessage(), ex);
            actionMessage = ex.getMessage();
            return;
        } finally {
            try {
                transaction.commit();
            } catch(final Exception ex) {
                logger.error(ex.getMessage(), ex);
                
                try {
                    transaction.rollback();
                } catch(final Exception exRollback) {
                    logger.error(exRollback.getMessage(), exRollback);
                }
            }
            
            logger.trace("EXIT handle(request, response)");
        }
    }
    
    private void retrieveAllPersons() {
        logger.trace("ENTER retrieveAllPersons()");
        
        final TypedQuery<Person> query = entityManager.createNamedQuery(Person.FIND_ALL, Person.class);
        persons = query.getResultList();
        
        logger.trace("EXIT retrieveAllPersons()");
    }
    
    private void update(HttpServletRequest request) {
        logger.trace("ENTER update(request)");
        
        final String firstName = request.getParameter("firstName");
        final String lastName = request.getParameter("lastName");
        final String email = request.getParameter("email");
        final String password = request.getParameter("password");
        final String role = request.getParameter("role");
        
        person.setFirstName(firstName);
        person.setLastName(lastName);
        person.setEmail(email);
        person.setPassword(password);
        person.setRole(role);
        
        Person emailQuery = null;
        
        try {
          emailQuery = entityManager.createQuery("SELECT c FROM Person c WHERE c.email = :email").setParameter("email", email).getSingleResult(); 
        } catch (Exception ex) {
            
        }
        
        if (person.getOid() == null && emailQuery == null ) {
//            logger.debug("Generated new OID: {}", product.getOid().toString());
            actionMessage = "Created New Person";
            
            entityManager.persist(person);
        } else if ( emailQuery != null ) {
            logger.debug("Duplcated Emal: {}", email);
            actionMessage = "Duplicated Email Address, please change one";
        } else {
            logger.debug("Updated OID: {}", person.getOid().toString());
            actionMessage = "Updated Product";
        }
        
        logger.trace("EXIT update(request)");
    }
    
    public String getActionMessage() {
        return actionMessage;
    }
    
    public Person getPerson() {
        return person;
    }
    
    public List<Person> getPersons() {
        return persons;
    }

    /**
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param title the title to set
     */
    public void setTitle(String title) {
        this.title = title;
    }
}




