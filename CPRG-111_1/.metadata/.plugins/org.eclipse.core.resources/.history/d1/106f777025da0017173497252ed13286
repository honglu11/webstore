package ca.sait.current;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExampleCounterRunnable implements Runnable {
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	private int counter = 0;
	private final ReentrantReadWriteLock LOCK = new ReentrantReadWriteLock();
	private final WriteLock WRITE = LOCK.writeLock();
	private final ReadLock READ = LOCK.readLock();
	
	
	// no swap
		
	@Override
	public void run() {
       logger.trace("ENTER run()");
	
       //if put synchronized outside of for loop get two thread run seperate i not looks like share
		try {
			while (true) {
				WRITE.lock();
				try {
				counter++;
				} finally {
					WRITE.unlock();
				}
				
				READ.lock(); // everybody can read, nobody can write
				try {
				if ( counter < 100) {
					
					if ( counter == 50) {
						try {
							Thread.sleep(2000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					logger.info("counter: {}", counter); // see 50 print out later, don't block other thread carry on.
				}
				 else {
					break;
				 }				
		
			} finally {
				READ.unlock();
			}
			}
			
		} finally {
			logger.trace("EXIT run()");
		}
		
	}

}
