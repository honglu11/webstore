package ca.sait.logger;

import java.util.concurrent.atomic.AtomicInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExampleRunnable3 implements Runnable {
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	private AtomicInteger counter = new AtomicInteger(); // do memory in the same place, no swap, so guarrentee, grace syncronized way
	
	// no swap
		
	@Override
	public void run() {
       logger.trace("ENTER run()");
	
       //if put synchronized outside of for loop get two thread run seperate i not looks like share
		try {
			while (true) {
				int i = counter.getAndIncrement();
				
				if ( i < 100) 
					logger.info("i: {}", i);
				 else 
					break;
				
			}
			
		} finally {
			logger.trace("EXIT run()");
		}
		
	}

}
