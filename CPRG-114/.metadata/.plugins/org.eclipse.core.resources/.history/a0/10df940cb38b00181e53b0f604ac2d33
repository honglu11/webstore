/**
 * 
 */
package ca.sait.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import ca.sait.mystore.entity.PersonEntity;
import ca.sait.mystore.entity.ShoppingCartItemEntity;

/**
 * @author Hong Lu
 * 
 */
public final class ShoppingCart implements Serializable {
    
    /**
     * 
     */

   @ManyToOne(optional=false)
    @JoinColumn(name="person_oid", nullable=false, updatable=false)
    private PersonEntity customer;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="shopping_date", nullable=false)
    private Date shoppingDate;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="shipped_date", nullable=true)
    private Date shippedDate;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="recieved_date", nullable=true)
    private Date recievedDate;
    
    @Enumerated(EnumType.STRING)
    @Column(name="cart_status", nullable=true)
    private CartStatus status;
    
    // one shopping cart has many items;
    @OneToMany(mappedBy="cart", fetch=FetchType.LAZY, cascade=CascadeType.ALL) // point to private ShoppingCartEntity cart; so the map is "cart" attribute name
    private List<ShoppingCartItemEntity> items; // when get items attribute reference then query the items

    /**
     * @return the items
     */
    public List<ShoppingCartItemEntity> getItems() {
        if (items == null) 
            items = new ArrayList<>();
        return items;
    }

    /**
     * @param items the items to set
     */
    public void setItems(List<ShoppingCartItemEntity> items) {
        this.items = items;
    }

    /**
     * @return the customer
     */
    public PersonEntity getCustomer() {
        return customer;
    }

    /**
     * @param customer the customer to set
     */
    public void setCustomer(PersonEntity customer) {
        this.customer = customer;
    }

    /**
     * @return the shoppingDate
     */
    public Date getShoppingDate() {
        return shoppingDate;
    }

    /**
     * @param shoppingDate the shoppingDate to set
     */
    public void setShoppingDate(Date shoppingDate) {
        this.shoppingDate = shoppingDate;
    }

    /**
     * @return the shippedDate
     */
    public Date getShippedDate() {
        return shippedDate;
    }

    /**
     * @param shippedDate the shippedDate to set
     */
    public void setShippedDate(Date shippedDate) {
        this.shippedDate = shippedDate;
    }

    /**
     * @return the recievedDate
     */
    public Date getRecievedDate() {
        return recievedDate;
    }

    /**
     * @param recievedDate the recievedDate to set
     */
    public void setRecievedDate(Date recievedDate) {
        this.recievedDate = recievedDate;
    }

    /**
     * @return the status
     */
    public CartStatus getStatus() {
        return status;
    }

    /**
     * @param status the status to set
     */
    public void setStatus(CartStatus status) {
        this.status = status;
    }

}
