/**
 * 
 */
package ca.sait.mystore.ejb;


import java.util.List;
import java.util.Set;
import java.util.UUID;

import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.NoResultException;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import ca.sait.dto.Person;
import ca.sait.dto.Product;
import ca.sait.mystore.dao.DAOManagerFactory;
import ca.sait.mystore.entity.PersonEntity;
import ca.sait.mystore.entity.ProductEntity;
import ca.sait.services.NoEntityFoundException;
import ca.sait.services.PersonService;
import ca.sait.services.ProductService;

/**
 * @author Chris Elias
 *
 */
@Stateless
@Local(ProductService.class)
public class ProductServiceImpl 
implements ProductService {

    @EJB
    private DAOManagerFactory daoFactory;
    
    @Inject
    private Validator validator;
    
    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#create(ca.sait.dto.Person)
     */
    @Override
    public UUID create(Product product) {
        final Set<ConstraintViolation<Product>> issues = validator.validate(product);
        final ProductEntity entity = new ProductEntity();
        entity.setName(product.getName());
        entity.setDescription(product.getDescription());
        entity.setPrice(product.getPrice());
        entity.setInventoryQuantity(product.getInventoryQuantity());
        
        daoFactory.getProductDAO().persist(entity);

        return entity.getOid();
    }  

    /*
     * (non-Javadoc)
     * 
     * @see ca.sait.services.ProductService#findByName(java.lang.String)
     */
    @Override
    public Product findByName(String name) throws NoEntityFoundException {
        try {
            return daoFactory.getProductDAO().findByNameDTO(name);
        } catch (final NoResultException ex) {
            throw new NoEntityFoundException("No name: " + name);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see ca.sait.services.ProductService#findById(java.util.UUID)
     */
    @Override
    public Product findById(UUID id) throws NoEntityFoundException {
        try {
            return daoFactory.getProductDAO().findDTO(id);
        } catch (final NoResultException ex) {
            throw new NoEntityFoundException("No oid: " + id);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see ca.sait.services.ProductService#findAll()
     */
    @Override
    public List<Product> findAll() {
        return daoFactory.getProductDAO().findAllDTO();
    }

    @Override
    public void removeProduct(UUID id) throws NoEntityFoundException {
        ProductEntity productEntity = daoFactory.getProductDAO().find(id);
        if (productEntity == null)
            throw new NoEntityFoundException("No oid: " + id);
        daoFactory.getProductDAO().delete(productEntity);
    }

}