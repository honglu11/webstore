/**
 * 
 */
package ca.sait.mystore.web.mvc.model;

import java.sql.Date;
import java.util.Optional;

import javax.enterprise.inject.Model;
import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ca.sait.dto.Person;
import ca.sait.dto.Role;
import ca.sait.services.NonUniqueException;
import ca.sait.services.PersonService;
import ca.sait.services.RoleService;
import ca.sait.services.ValidationException;

/**
 *
 */
@Model
public class RegisterModel extends AbstractModel {

    @Inject
    private PersonService personService;
    @Inject
    private RoleService roleService;
    private Person person;

    private String registerSuccessMessage;
    private String registerErrorMessage;

    /*
     * (non-Javadoc)
     * 
     * @see ca.sait.mystore.web.mvc.model.AbstractView#process(javax.servlet.http.
     * HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    @Override
    protected String process(HttpServletRequest request, HttpServletResponse response) {
        logger().trace("ENTER process(request,resposne)");

        try {
            final Optional<String> optAction = Optional.ofNullable(request.getParameter("action"));
            final String action = optAction.orElse("").toUpperCase();

            switch (action) {
            case "LOGIN": {
                final String email = request.getParameter("email");
                final String password = request.getParameter("password");

                try {
                    request.login(email, password);
                    setSuccessMessage("You have logged In");

                    logger().info("Logged in as : {}", request.getUserPrincipal().getName());
                } catch (final ServletException ex) {
                    setErrorMessage("Invalid Username/password");
                }

                break;
            }
            case "REGISTER": {
                register(request);
                break;
            }
            }

            return "/WEB-INF/jsp/register.jsp";
        } finally {
            logger().trace("EXIT process(request,resposne)");
        }
    }

    private void register(HttpServletRequest request) {
        logger().trace("ENTER register(request,resposne)");
        
        String firstName = request.getParameter("firstName");
        logger().debug(request.getParameter("firstName"));

        if (firstName != null && firstName.trim().isEmpty())
            firstName = null;
        String lastName = request.getParameter("lastName");
        if (lastName != null && lastName.trim().isEmpty())
            lastName = null;
        String email = request.getParameter("email");
        if (email != null && email.trim().isEmpty())
            email = null;
        String password = request.getParameter("password");
        if (password != null && password.trim().isEmpty())
            password = null;
        String confirmPassword = request.getParameter("confirmPassword");
        if (confirmPassword != null && confirmPassword.trim().isEmpty())
            confirmPassword = null;
        if (confirmPassword == null) {
            setRegisterErrorMessage("Confirm Password cannot be empty!");
        }
        if (password != null && confirmPassword != null) {
            if (!confirmPassword.equals(password)) {
                setRegisterErrorMessage("Confirm Password is not the same as Password!");
                return;
            }
        }

        try {
            Date birthdate = Date.valueOf("2000-11-11");

            person = new Person(getOid(), firstName, lastName, email, password, birthdate);
            final Role role = roleService.findByName("guest");

            for (String roleName : person.getRoles()) {
                logger().debug("roleName" + roleName);
            }
            person.getRoles().add(role.getName());

            for (String roleName : person.getRoles()) {
                logger().debug("roleName" + roleName);
            }
            
            if (getErrors().isEmpty()) {
                setOid(personService.persist(person));
//                setSuccessMessage("Updated");
                try {
                    request.login(person.getEmail(), person.getPassword());
                    setRegisterSuccessMessage("Created and Logged in");
                } catch(final ServletException ex) {
                    setRegisterErrorMessage(ex.getMessage());
                }
            } else {
                setRegisterErrorMessage("Data Error Issues");
            }

        } catch (final ValidationException ex) {
            ex.getValidationErrors().forEach(getErrors()::put);
            setRegisterErrorMessage(ex.getMessage());
        } catch (final NonUniqueException ex) {
            setRegisterErrorMessage(ex.getMessage());
        }

        logger().trace("EXIT register(request,resposne)");
    }

    @Override
    public String getNavigationName() {
        return "REGISTER";
    }
    
    /**
     * @return the registerSuccessMessage
     */
    public String getRegisterSuccessMessage() {
        return registerSuccessMessage;
    }

    /**
     * @param registerSuccessMessage the registerSuccessMessage to set
     */
    public void setRegisterSuccessMessage(String registerSuccessMessage) {
        this.registerSuccessMessage = registerSuccessMessage;
    }

    /**
     * @return the registerErrorMessage
     */
    public String getRegisterErrorMessage() {
        return registerErrorMessage;
    }
    /**
     * @param registerErrorMessage the registerErrorMessage to set
     */
    public void setRegisterErrorMessage(String registerErrorMessage) {
        this.registerErrorMessage = registerErrorMessage;
    }

}
