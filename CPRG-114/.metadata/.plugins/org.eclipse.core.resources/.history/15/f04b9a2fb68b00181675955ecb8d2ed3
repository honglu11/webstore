/**
 * 
 */
package ca.sait.mystore.admin.mvc.model;

import java.sql.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Model;
import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ca.sait.dto.Person;
import ca.sait.dto.Product;
import ca.sait.dto.Role;

import ca.sait.services.NoEntityFoundException;
import ca.sait.services.NonUniqueException;
import ca.sait.services.PersonService;
import ca.sait.services.ProductService;
import ca.sait.services.RoleService;
import ca.sait.services.ValidationException;

/**
 *
 */
@Named("Persons")
@RequestScoped
public class PersonsModel extends AbstractModel {

    @Inject
    private PersonService personService;
    @Inject
    private RoleService roleService;
    private Person person; // = private Person person = null;

    private Map<String, String> errors;

    public PersonsModel() {
        logger().trace("ENTER PersonsModel()");
        logger().trace("EXIT PersonsModel()");
    }

    @PostConstruct
    private void postConstruct() {
        logger().trace("ENTER postConstruct()");
        logger().trace("EXIT postConstruct()");
    }

    /*
     * (non-Javadoc)
     * 
     * @see ca.sait.mystore.web.mvc.model.AbstractView#process(javax.servlet.http.
     * HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    @Override
    protected String process(HttpServletRequest request, HttpServletResponse response) {
        logger().trace("ENTER process(request,resposne)");

        // try {
        // final String [] resources =
        // request.getRequestURI().substring(request.getContextPath().length()).split("/");
        // for (String resource : resources) {
        // logger().debug("Resource: {}", resource);
        // }
        //
        // try {
        // setOid(UUID.fromString(resources[resources.length-1]));
        // } catch(final IllegalArgumentException ex) {
        // // sillence
        // }
        try {
            final String action = request.getParameter("action");
            if ("persist".equals(action)) {
                persist(request);
            }

            return "/WEB-INF/jsp/persons.jsp";
        } finally {
            logger().trace("EXIT process(request,resposne)");
        }
    }

    private void persist(HttpServletRequest request) {
        logger().trace("ENTER persist(request,resposne)");
        final String firstName = request.getParameter("firstName");
        final String lastName = request.getParameter("lastName");
        final String email = request.getParameter("email");
        final String birthdateTmp = request.getParameter("birthdate");
        final String password = request.getParameter("password");
        final String selectedRole = request.getParameter("role");

        logger().debug("selectedRole" + selectedRole);
        final Date birthdate = birthdateTmp == null ? null : Date.valueOf(birthdateTmp);
        logger().debug("birthdateTmp" + birthdateTmp);
        
        logger().debug("birthdate" + birthdate);

        final Person person = new Person(getOid(), firstName, lastName, email, password, birthdate);
        final Role role = roleService.findByName(selectedRole);
        
        for( String roleName : person.getRoles()) {
            logger().debug("roleName" + roleName); 
        }
        person.getRoles().add(role.getName());
        
        for( String roleName : person.getRoles()) {
            logger().debug("roleName" + roleName); 
        }
        
        try {
            setOid(personService.persist(person));
            request.setAttribute("SUCCESS_MESSAGE", "Updated");
        } catch (final ValidationException ex) {
            errors = ex.getValidationErrors();
            request.setAttribute("ERROR_MESSAGE", ex.getMessage());
        } catch (final NonUniqueException ex) {
            request.setAttribute("ERROR_MESSAGE", ex.getMessage());
        }

        // if ("good".equals(name)) {
        // request.setAttribute("SUCCESS_MESSAGE", "This will be a success message");
        // } else if ("bad".equals(name)) {
        // request.setAttribute("ERROR_MESSAGE", "This will be a error message");
        // }
        logger().trace("EXIT persist(request,resposne)");
    }

    @Override
    public String getNavigationName() {
        return "PERSONS";
    }

    public Person getPerson() {
        if (person == null) {
            if (getOid() == null) {
                person = new Person();
            } else {
                try {
                    person = personService.findById(getOid());
                } catch (NoEntityFoundException ex) {
                    logger().error("Entity not found: {}", getOid());
                }
            }
        }

        return person;

    }

    public List<Person> getAllPersons() {
        return personService.findAll();
    }

    /**
     * @return the errors
     */
    public Map<String, String> getErrors() {
        return errors;
    }

    /**
     * @param errors
     *            the errors to set
     */
    public void setErrors(Map<String, String> errors) {
        this.errors = errors;
    }

    public List<Role> getAllRoles() {
        logger().trace("ENTER getAllRoles()");
        return roleService.findAll();
    }

}
