/**
 * 
 */
package ca.sait.mystore.ejb;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.Stateless;
import javax.persistence.NoResultException;

import ca.sait.dto.Person;
import ca.sait.mystore.dao.DAOManagerFactory;
import ca.sait.mystore.entity.PersonEntity;
import ca.sait.services.NoEntityFoundException;
import ca.sait.services.PersonService;

/**
 * @author Chris Elias
 *
 */
@Stateless
@Local(PersonService.class)
public class PersonServiceImpl 
implements PersonService {

    @EJB
    private DAOManagerFactory daoFactory;
    
    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#create(ca.sait.dto.Person)
     */
    @Override
    public UUID create(Person person) {
        final PersonEntity entity = new PersonEntity();
        entity.setBirthdate(person.getBirthdate());
        entity.setEmail(person.getEmail());
        entity.setFirstName(person.getFirstName());
        entity.setLastName(person.getLastName());
        entity.setPassword(person.getPassword());
        entity.setBirthdate(Date.valueOf(LocalDate.now()));
        
        daoFactory.getPersonDAO().persist(entity);

        return entity.getOid();
    }


    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findByEmail(java.lang.String)
     */
    @Override
    public Person findByEmail(String email) throws NoEntityFoundException{
        try {
               
        return daoFactory.getPersonDAO().findByEmailDTO(email);
        } catch(final NoResultException ex) {
            throw new NoEntityFoundException("No email: " + email);
        }
    }

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findById(java.util.UUID)
     */
    @Override
    public Person findById(UUID id) throws NoEntityFoundException {
        try {
        return daoFactory.getPersonDAO().findDTO(id);
        } catch(final NoResultException ex) {
            throw new NoEntityFoundException("No oid: " + id);
        }
    }

    /* (non-Javadoc)
     * @see ca.sait.services.PersonService#findAll()
     */
    @Override
    public List<Person> findAll() {
        return daoFactory.getPersonDAO().findAllDTO();
    }
    
    @Override
    public void removePerson(UUID oid) throws NoEntityFoundException {
        PersonEntity personEntity = daoFactory.getPersonDAO().find(oid);
        if (personEntity == null)
        throw new NoEntityFoundException("No oid: " + oid);
    
        daoFactory.getPersonDAO().delete(personEntity);
      
    }
}